<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_StewartInterface" Id="{1361bc11-031f-4d48-8e10-a5face54a5bf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StewartInterface
VAR_INPUT
	// Stewart mode input
	cmnd : UDINT;
	
	control AT %I* : ST_ControlStewart;
	
	// Ship simulator input
	eta_sim : ARRAY [0..5] OF LREAL;
	
	// Max/min settings
	u_max : ARRAY [0..5] OF REAL := [0.2, 0.2, 0.4, 10.0/180.0*pi, 10.0/180.0*pi, 5.0/180.0*pi];
	u_min : ARRAY [0..5] OF REAL := [-0.2, -0.2, -0.4, -10.0/180.0*pi, -10.0/180.0*pi, -5.0/180.0*pi];
	
END_VAR
VAR_OUTPUT
	feedback AT %Q* : ST_FeedbackStewart;
	active : BOOL := FALSE;
END_VAR
VAR	
	// Udp connection
	udpClient : FB_UdpClient('', 0, 0, 0, 0, 0, 0);	// Dummy constructor

	{attribute 'tc_no_symbol'}
	rxUdp : ST_RxUdpStewart;
	{attribute 'tc_no_symbol'}
	txUdp : ST_TxUdpStewart;
	
	// Hmi connection
	pTxHmi : POINTER TO ST_TxHmiStewart;
	
	// Actviity monitoring
	frame : DINT := 0;
	frameOld : DINT := 0;
	frameLoss : DINT := 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Check activity
frame := rxUdp.Frame_Count;
IF frame <> frameOld THEN
	// Update frame old
	frameOld := frame;
	
	// Reset frameLoss
	frameLoss := 0;
ELSE
	// Count frame losses
	frameLoss := frameLoss + 1;
END_IF

// Set activity status after 1 second given 5ms in ms
IF frameLoss > 200 THEN
	active := FALSE;
ELSE
	active := TRUE;
END_IF

// Set command signal
txUdp.CMND := cmnd;

// Update UDP data
UpdateUDP();

// UpdateHMI data
UpdateHMI();

eta_sim := control.eta;]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{8ba73825-ee69-4ede-8932-47c54b7f6de6}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{06b517cb-e9ba-491f-b4c0-60d83ffac9ef}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	// Init variables
	_remoteIpAddr : T_Ipv4Addr;
	_remotePort : UINT;
	_localPort : UINT;
	_pTxHmi : POINTER TO ST_TxHmiStewart;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Set Hmi data pointer
pTxHmi := _pTxHmi;

// Initilize udpClient
udpClient.FB_init(
	bInitRetains,
	bInCopyCode,
	_remoteIpAddr,
	_remotePort,
	_localPort,
	SIZEOF(rxUdp),
	ADR(rxUdp),
	SIZEOF(txUdp),
	ADR(txUdp)
);

// EM8000
IF _remotePort = 50030 THEN
	rxUdp.Actual_platform_position_heave := 0.9986208;
END_IF

// EM15000
IF _remotePort = 50031 THEN
	rxUdp.Actual_platform_position_heave := 0.4663845;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{4b663cd2-46c9-45ec-89d5-bc5feb2a54a3}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateHMI" Id="{a9887336-1204-4937-ac9a-dbd87e2aa261}">
      <Declaration><![CDATA[METHOD UpdateHMI : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Update global Hmi data
IF active THEN
	pTxHmi^.status := 0;
ELSE
	pTxHmi^.status := -1;
END_IF

pTxHmi^.eta[0] := rxUdp.Actual_platform_position_surge;
pTxHmi^.eta[1] := rxUdp.Actual_platform_position_sway;
pTxHmi^.eta[2] := rxUdp.Actual_platform_position_heave;
pTxHmi^.eta[3] := rxUdp.Actual_platform_position_roll;
pTxHmi^.eta[4] := rxUdp.Actual_platform_position_pitch;
pTxHmi^.eta[5] := rxUdp.Actual_platform_position_yaw;

pTxHmi^.eta_ref[0] := rxUdp.Platform_setpoint_surge;
pTxHmi^.eta_ref[1] := rxUdp.Platform_setpoint_sway;
pTxHmi^.eta_ref[2] := rxUdp.Platform_setpoint_heave;
pTxHmi^.eta_ref[3] := rxUdp.Platform_setpoint_roll;
pTxHmi^.eta_ref[4] := rxUdp.Platform_setpoint_pitch;
pTxHmi^.eta_ref[5] := rxUdp.Platform_setpoint_yaw;

pTxHmi^.eta_sim[0] := LREAL_TO_REAL(eta_sim[0]);
pTxHmi^.eta_sim[1] := LREAL_TO_REAL(eta_sim[1]);
pTxHmi^.eta_sim[2] := LREAL_TO_REAL(eta_sim[2]);
pTxHmi^.eta_sim[3] := LREAL_TO_REAL(eta_sim[3]);
pTxHmi^.eta_sim[4] := LREAL_TO_REAL(eta_sim[4]);
pTxHmi^.eta_sim[5] := LREAL_TO_REAL(eta_sim[5]);

pTxHmi^.cyl[0] := rxUdp.Actual_position_actuator_1;
pTxHmi^.cyl[1] := rxUdp.Actual_position_actuator_2;
pTxHmi^.cyl[2] := rxUdp.Actual_position_actuator_3;
pTxHmi^.cyl[3] := rxUdp.Actual_position_actuator_4;
pTxHmi^.cyl[4] := rxUdp.Actual_position_actuator_5;
pTxHmi^.cyl[5] := rxUdp.Actual_position_actuator_6;]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateUDP" Id="{fa7be61e-1c66-4719-a523-22b569833bd3}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateUDP
VAR_INPUT
END_VAR
VAR

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Increment counter to keep Stewart alive
txUdp.COUNT := txUdp.COUNT + 1;

// Control data with absolute limits applied
txUdp.X_EXTRA := LIMIT(u_min[0], LREAL_TO_REAL(control.eta[0]), u_max[0]);
txUdp.Y_EXTRA := LIMIT(u_min[1], LREAL_TO_REAL(control.eta[1]), u_max[1]);
txUdp.Z_EXTRA := LIMIT(u_min[2], LREAL_TO_REAL(control.eta[2]), u_max[2]);
txUdp.PHI_EXTRA := LIMIT(u_min[3], LREAL_TO_REAL(control.eta[3]), u_max[3]);
txUdp.THETA_EXTRA := LIMIT(u_min[4], LREAL_TO_REAL(control.eta[4]), u_max[4]);
txUdp.PSI_EXTRA := LIMIT(u_min[5], LREAL_TO_REAL(control.eta[5]), u_max[5]);

// Update udpClient
udpClient();

// Feedback data
feedback.eta[0] := REAL_TO_LREAL(rxUdp.Actual_platform_position_surge);
feedback.eta[1] := REAL_TO_LREAL(rxUdp.Actual_platform_position_sway);
feedback.eta[2] := REAL_TO_LREAL(rxUdp.Actual_platform_position_heave);
feedback.eta[3] := REAL_TO_LREAL(rxUdp.Actual_platform_position_roll);
feedback.eta[4] := REAL_TO_LREAL(rxUdp.Actual_platform_position_pitch);
feedback.eta[5] := REAL_TO_LREAL(rxUdp.Actual_platform_position_yaw);

feedback.eta_t[0] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_surge);
feedback.eta_t[1] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_sway);
feedback.eta_t[2] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_heave);
feedback.eta_t[3] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_roll);
feedback.eta_t[4] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_pitch);
feedback.eta_t[5] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_yaw);

feedback.eta_tt[0] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_surge);
feedback.eta_tt[1] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_sway);
feedback.eta_tt[2] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_heave);
feedback.eta_tt[3] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_roll);
feedback.eta_tt[4] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_pitch);
feedback.eta_tt[5] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_yaw);



]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_StewartInterface">
      <LineId Id="402" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="423" Count="2" />
      <LineId Id="412" Count="2" />
      <LineId Id="410" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="417" Count="1" />
      <LineId Id="421" Count="1" />
      <LineId Id="419" Count="0" />
      <LineId Id="399" Count="1" />
      <LineId Id="265" Count="0" />
      <LineId Id="210" Count="2" />
      <LineId Id="325" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="465" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.FB_exit">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.FB_init">
      <LineId Id="87" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="44" Count="4" />
      <LineId Id="51" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="103" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="105" Count="2" />
      <LineId Id="100" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.FB_reinit">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.UpdateHMI">
      <LineId Id="5" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="46" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="5" />
      <LineId Id="23" Count="5" />
      <LineId Id="22" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="34" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="17" Count="2" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.UpdateUDP">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="4" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="98" Count="18" />
      <LineId Id="34" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="89" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>