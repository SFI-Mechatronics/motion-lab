<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.7">
  <POU Name="FB_QualisysInterface" Id="{314e7cd5-278b-4ae6-86cd-8f8bb2148757}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_QualisysInterface
VAR_INPUT
END_VAR
VAR_OUTPUT
	bodyComponent : ST_RT6DComponent;
	markerComponent : ST_3DMarkerPositionNoLabelComponent;
	
	feedback : ST_FeedbackQualisys;
	
	active : BOOL := FALSE;
END_VAR
VAR
	// Udp related
	{attribute 'tc_no_symbol'}
	udpServer : FB_UdpServer(0, 0, 0, 0, 0); // Dummy constructor
	{attribute 'tc_no_symbol'}

	// Header 
	qrtPacket : ST_RTDataQRTPacket;
	qrtComponent : ARRAY [1..100] OF ST_RTComponentData;
	
	offset : UDINT;
	comp : UDINT;
	
	// HMi data
	pTxHmi : POINTER TO ST_TxHmiQualisys;
	
	// Actviity monitoring
	frame : DINT := 0;
	frameOld : DINT := 0;
	frameLoss : DINT := 0;
	
	stZero3DMarkerPositionNoLabelComponent : ST_3DMarkerPositionNoLabelComponent;
	
	// Marker tracking
	dMarker : REAL := 62.0;
	eMin : REAL;
	e : REAL;
	i : UDINT;
	j : UDINT;
	d : REAL;
	
	
	iSave : UDINT;
	jSave : UDINT;
	dSave : REAL;
	xSave : REAL;
	ySave : REAL;
	zSave : REAL;
	
	iMarker : ST_3DMarkerPositionNoLabel;
	jMarker : ST_3DMarkerPositionNoLabel;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Check activity
frame := UDINT_TO_DINT(qrtPacket.nFramenumber);
IF frame <> frameOld THEN
	// Update frame old
	frameOld := frame;
	
	// Reset frameLoss
	frameLoss := 0;
ELSE
	// Count frame losses
	frameLoss := frameLoss + 1;
END_IF

// Set activity status after 1 second given 5ms in ms
IF frameLoss > 200 THEN
	active := FALSE;
ELSE
	active := TRUE;
END_IF

// Update HMI data
UpdateHMI();

// Exchange Udp data
udpServer();

// Decode Udp packet
MEMCPY(ADR(qrtPacket), ADR(udpServer.rxBuffer), SIZEOF(ST_RTDataQRTPacket));

// Zero out data
MEMCPY(ADR(markerComponent), ADR(stZero3DMarkerPositionNoLabelComponent), SIZEOF(ST_3DMarkerPositionNoLabelComponent));

offset := SIZEOF(ST_RTDataQRTPacket);
FOR comp := 1 TO qrtPacket.nComponentCount DO
	// Read components header
	MEMCPY(ADR(qrtComponent[comp]), ADR(udpServer.rxBuffer) + offset, SIZEOF(ST_RTComponentData));
	
	// Defoce components
	CASE qrtComponent[comp].nType OF
		1 : // 3D marker data 

		2 : // Unidentified 3D marker data
		MEMCPY(ADR(markerComponent), ADR(udpServer.rxBuffer) + offset, qrtComponent[comp].nSize); 
		
		3 : // Analog data from available analog devices
		
		4 : // Force data from available force plates.
		
		5 : // 6D data - position and rotation matrix
		MEMCPY(ADR(bodyComponent), ADR(udpServer.rxBuffer) + offset, qrtComponent[comp].nSize);
		
		6 : // 6D data - position and Euler angles
		
		7 : // 2D marker data
		
		8 : // Linearized 2D marker data
		
		9 : // 3D marker data with residuals
		
		10 : // Unidentified 3D marker data with residuals
		
		11 : // 6D data - position and rotation matrix with residuals
		
		12 : // 6D data - position and Euler angles with residuals
		
		13 : // Analog data from available analog devices
		
		14 : // Image frame from a specific camera
		
		15 : // Force data from available force plates
		
	END_CASE
	
	// Increment component byte offset
	offset := offset + SIZEOF(ST_RTComponentData) + qrtComponent[comp].nSize;
END_FOR

// Get hook position
IF active THEN
	IF markerComponent.nMarkers >= 2 THEN
		// Reset eMin to a default "high" value
		eMin := 1E10;
		
		FOR i := 0 TO markerComponent.nMarkers DO
			FOR j := 0 TO markerComponent.nMarkers DO
				// Calculate norm
				d := GetNorm(markerComponent.markers[i], markerComponent.markers[j]);
				e := ABS(d - dMarker);
				
				// Check if current marker set is closer than the others
				IF e < eMin THEN
					eMin := e;
					
					dSave := d;
					iSave := i;
					jSave := j;
				END_IF
			END_FOR
		END_FOR
		// Pick saved markers
		iMarker := markerComponent.markers[iSave];
		jMarker := markerComponent.markers[jSave];
		
		// Calculate average marker
		feedback.d := dSave/1000.0;
		
		xSave := (iMarker.x + jMarker.x)/2.0;
		ySave := (iMarker.y + jMarker.y)/2.0;
		zSave := (iMarker.z + jMarker.z)/2.0;
		
	ELSIF markerComponent.nMarkers = 1 THEN
		// Indicate that hook is based on a single marker

		xSave := markerComponent.markers[0].x;
		ySave := markerComponent.markers[0].y;
		zSave := markerComponent.markers[0].z;
	ELSE	
		// Indicate that no markers are detected
		feedback.d := -1.0;
	END_IF
	
	// mm -> m
	feedback.p[0] := REAL_TO_LREAL(xSave/1000.0);
	feedback.p[1] := REAL_TO_LREAL(ySave/1000.0);
	feedback.p[2] := REAL_TO_LREAL(zSave/1000.0);
	
END_IF

	
	
	
]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{218c743a-0e42-4699-b90a-ee85a516329b}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f7454e96-6d71-45e3-a8c8-afff39670148}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

	// Init variables
	_localPort : UINT;
	_pTxHmi : POINTER TO ST_TxHmiQualisys;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initilize the udpServer
udpServer.FB_init(
	bInitRetains,
	bInCopyCode,
	_localPort,
	0,
	0,
	0,
	0
);

pTxHmi := _pTxHmi;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{a77f1cd7-b4fd-4175-afb3-b8ab028ade9c}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNorm" Id="{728830f4-0a5a-4307-8c1f-0576f2b3aab7}">
      <Declaration><![CDATA[METHOD PRIVATE GetNorm : REAL
VAR_INPUT
	m1 : ST_3DMarkerPositionNoLabel;
	m2 : ST_3DMarkerPositionNoLabel;
END_VAR

VAR
	x : REAL;
	y : REAL;
	z : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Vector 
x := m2.x - m1.x;
y := m2.y - m1.y;
z := m2.z - m1.z;

// Norm
GetNorm := SQRT(x*x + y*y + z*z);]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateHMI" Id="{90c4b41f-ef66-41d0-8737-7df7866b25e1}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateHMI : BOOL
VAR_INPUT
END_VAR

VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Update global Hmi data
IF active THEN
	pTxHmi^.status := 0;
ELSE
	pTxHmi^.status := -1;
END_IF

// Update feedback data
// TODO

// Marker data
FOR i := 0 TO 9 DO
	pTxHmi^.markers[i] := markerComponent.markers[i];
END_FOR ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_QualisysInterface">
      <LineId Id="229" Count="17" />
      <LineId Id="228" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="163" Count="1" />
      <LineId Id="193" Count="0" />
      <LineId Id="165" Count="6" />
      <LineId Id="201" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="175" Count="17" />
      <LineId Id="173" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="196" Count="2" />
      <LineId Id="128" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="283" Count="2" />
      <LineId Id="266" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="291" Count="1" />
      <LineId Id="298" Count="1" />
      <LineId Id="316" Count="1" />
      <LineId Id="303" Count="1" />
      <LineId Id="300" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="404" Count="2" />
      <LineId Id="324" Count="1" />
      <LineId Id="327" Count="1" />
      <LineId Id="331" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="333" Count="1" />
      <LineId Id="462" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="400" Count="2" />
      <LineId Id="399" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_QualisysInterface.FB_exit">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_QualisysInterface.FB_init">
      <LineId Id="10" Count="7" />
      <LineId Id="21" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="FB_QualisysInterface.FB_reinit">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_QualisysInterface.GetNorm">
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_QualisysInterface.UpdateHMI">
      <LineId Id="6" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>