<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_WinchInterface" Id="{04fd987b-6b6d-4a7c-b1e1-6e43123e7fac}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WinchInterface
VAR_INPUT
	Ts : LREAL := 0.005;
	bEnable : BOOL;
	
	eModeCmd : E_WinchMode;
	u : LREAL;
	uRemote : LREAL;
	
END_VAR
VAR_OUTPUT
	bActive : BOOL := FALSE;
	
	eMode : E_WinchMode;
	length : LREAL;
	length_t : LREAL;
	length_tt : LREAL;
	
	
END_VAR
VAR
	// HMI feedback	
	pTxHmi : POINTER TO ST_TxHmiWinch;
	
	// MC2 Functions
	axis : AXIS_REF;
	fbPower : MC_Power;
	fbReset : MC_Reset;
	fbExtSetPointGenEnable : MC_ExtSetPointGenEnable;
	fbExtSetPointGenDisable : MC_ExtSetPointGenDisable;
	fbReadParameterSet : MC_ReadParameterSet;
	stAxisParameterSet : ST_AxisParameterSet;
	
	// Input trajectory
	l : LREAL := 0.0;
	l_t : LREAL := 0.0;
	l_tt : LREAL := 0.0;
	
	// Old input memeory
	uOld : LREAL;
	uRemoteOld : LREAL;

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Read parameter set
IF NOT fbReadParameterSet.Busy AND NOT fbReadParameterSet.Error THEN
	fbReadParameterSet(
		Axis := axis,
		Parameter := stAxisParameterSet,
		Execute := TRUE
	);
	
ELSE
	fbReadParameterSet(
		Axis := axis,
		Parameter := stAxisParameterSet,
		Execute := FALSE
	);
END_IF

// Operation state machine
CASE eModeCmd OF
	E_WinchMode.SETTLED :
		// Reset enable signal
		bEnable := FALSE;
	
		// Read current state to trajectory
		l := axis.NcToPlc.ActPos;
		l_t := axis.NcToPlc.ActVelo;
		l_tt := axis.NcToPlc.ActAcc;
		
		// Disable external setpoint
		disableExtSetPoint();
		
		// Power off the drive when external setpoint is disabled
		IF NOT fbExtSetPointGenDisable.Busy AND fbExtSetPointGenDisable.Done THEN
			fbPower(
				Axis := axis,
				Enable := FALSE,
				Enable_Positive := FALSE,
				Enable_Negative := FALSE
			);
			
		END_IF
	
		// Set current mode
		eMode := eModeCmd;
		
	E_WinchMode.REMOTE, E_WinchMode.MOTION_COMP :		
		// Power switch
		IF bEnable THEN
			// Enable power
			fbPower(
				Axis := axis,
				Enable := TRUE,
				Enable_Positive := TRUE,
				Enable_Negative := TRUE
			);	
			
			IF fbPower.Status THEN
				// Enable external setpoint when on		
				enableExtSetPoint();
			
			END_IF
			
		ELSE
			// Disable externale setpoint
			disableExtSetPoint();
			
			IF NOT fbExtSetPointGenDisable.Busy AND fbExtSetPointGenDisable.Done THEN
				// Enable power
				fbPower(
					Axis := axis,
					Enable := FALSE,
					Enable_Positive := FALSE,
					Enable_Negative := FALSE
				);	
				
			END_IF
		END_IF
			

		IF fbPower.Status AND fbExtSetPointGenEnable.Enabled THEN			
			// Set input based on velocity input u
			CASE eMode OF
				E_WinchMode.REMOTE : 
					l := LIMIT(stAxisParameterSet.fEncSoftEndMin, l + uRemote*Ts, stAxisParameterSet.fEncSoftEndMax);
					l_t := uRemote;
					l_tt := (uRemote - uRemoteOld)/Ts;
					
					// Update old variable
					uRemoteOld := uRemote;
					
				E_WinchMode.MOTION_COMP : 
					l := LIMIT(stAxisParameterSet.fEncSoftEndMin, l + u*Ts, stAxisParameterSet.fEncSoftEndMax);
					l_t := u;
					l_tt := (u - uOld)/Ts;
					
					// Update old variable
					uOld := u;
				
			END_CASE
			
			// Feed extrernal setpoints to axis interface
			MC_ExtSetPointGenFeed(
				Axis := axis,
				Position := l ,
				Velocity := l_t,
				Acceleration := l_tt,
				Direction := getDirection(l_t, l_tt)
			);
			
		END_IF
	
		// Set current mode
		eMode := eModeCmd;	
	
END_CASE


// Update axis data
axis();

// Return feedback data all the time
length := axis.NcToPlc.ActPos;
length_t := axis.NcToPlc.ActVelo;
length_tt := axis.NcToPlc.ActAcc;

// Check activity
bActive := fbPower.Status;]]></ST>
    </Implementation>
    <Method Name="disableExtSetPoint" Id="{8625365a-3f23-4e76-ba3a-d36439744fe2}">
      <Declaration><![CDATA[METHOD PRIVATE disableExtSetPoint : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbExtSetPointGenDisable(
	Axis := axis,
	Execute := TRUE
);
fbExtSetPointGenEnable(
	Axis := axis,
	Execute := FALSE
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="enableExtSetPoint" Id="{d86b78de-9d3a-4053-bd82-f21f9d22062b}">
      <Declaration><![CDATA[METHOD PRIVATE enableExtSetPoint : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbExtSetPointGenDisable(
	Axis := axis,
	Execute := FALSE
);
fbExtSetPointGenEnable(
	Axis := axis,
	Execute := TRUE
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{4ef8ab5f-4b43-4ec7-898b-623c39afb859}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	// Init variables
	_pTxHmi : POINTER TO ST_TxHmiStewart;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Ensure Power of axis is disbaled at startup
fbPower(
	Axis := axis,
	Enable := FALSE,
	Enable_Positive := FALSE,
	Enable_Negative := FALSE
);

fbExtSetPointGenDisable(
	Axis := axis,
	Execute := FALSE
);
fbExtSetPointGenEnable(
	Axis := axis,
	Execute := FALSE
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getDirection" Id="{586ffe40-74e2-455a-a0e6-4a0c6b8d92ca}">
      <Declaration><![CDATA[METHOD PRIVATE getDirection : DINT
VAR_INPUT
	l_t : LREAL;
	l_tt : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF l_t = 0.0 AND l_tt = 0.0 THEN
	// Standstill
	getDirection := 0;
	
ELSIF l_t >= 0.0 THEN
	// Positive motion
	getDirection := 1;
	
ELSE
	// Negative motion
	getDirection := -1;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateHMI" Id="{66797478-8570-421d-ad5d-4d9d457815e9}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateHMI : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Update HMI variables]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_WinchInterface">
      <LineId Id="1055" Count="0" />
      <LineId Id="1541" Count="0" />
      <LineId Id="1084" Count="1" />
      <LineId Id="1088" Count="0" />
      <LineId Id="1087" Count="0" />
      <LineId Id="1083" Count="0" />
      <LineId Id="1552" Count="0" />
      <LineId Id="1544" Count="0" />
      <LineId Id="1547" Count="3" />
      <LineId Id="1545" Count="1" />
      <LineId Id="1107" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="1684" Count="0" />
      <LineId Id="1686" Count="0" />
      <LineId Id="1685" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="1445" Count="0" />
      <LineId Id="1037" Count="0" />
      <LineId Id="1422" Count="1" />
      <LineId Id="1499" Count="0" />
      <LineId Id="1583" Count="0" />
      <LineId Id="1500" Count="0" />
      <LineId Id="1673" Count="0" />
      <LineId Id="1675" Count="8" />
      <LineId Id="1674" Count="0" />
      <LineId Id="1490" Count="0" />
      <LineId Id="1502" Count="0" />
      <LineId Id="1491" Count="0" />
      <LineId Id="1443" Count="0" />
      <LineId Id="995" Count="0" />
      <LineId Id="1597" Count="0" />
      <LineId Id="1728" Count="0" />
      <LineId Id="1749" Count="5" />
      <LineId Id="1747" Count="1" />
      <LineId Id="1755" Count="0" />
      <LineId Id="1742" Count="1" />
      <LineId Id="1756" Count="1" />
      <LineId Id="1759" Count="0" />
      <LineId Id="1758" Count="0" />
      <LineId Id="1760" Count="0" />
      <LineId Id="1762" Count="0" />
      <LineId Id="1761" Count="0" />
      <LineId Id="1763" Count="0" />
      <LineId Id="1765" Count="5" />
      <LineId Id="1764" Count="0" />
      <LineId Id="1771" Count="1" />
      <LineId Id="1736" Count="1" />
      <LineId Id="1606" Count="0" />
      <LineId Id="1621" Count="0" />
      <LineId Id="1624" Count="0" />
      <LineId Id="1692" Count="1" />
      <LineId Id="1697" Count="1" />
      <LineId Id="1696" Count="0" />
      <LineId Id="1779" Count="0" />
      <LineId Id="1781" Count="0" />
      <LineId Id="1780" Count="0" />
      <LineId Id="1699" Count="1" />
      <LineId Id="1702" Count="1" />
      <LineId Id="1701" Count="0" />
      <LineId Id="1782" Count="2" />
      <LineId Id="1695" Count="0" />
      <LineId Id="1694" Count="0" />
      <LineId Id="1627" Count="0" />
      <LineId Id="1629" Count="6" />
      <LineId Id="1622" Count="0" />
      <LineId Id="1690" Count="0" />
      <LineId Id="1689" Count="0" />
      <LineId Id="1492" Count="0" />
      <LineId Id="1501" Count="0" />
      <LineId Id="1493" Count="0" />
      <LineId Id="1571" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="1484" Count="0" />
      <LineId Id="1271" Count="0" />
      <LineId Id="1438" Count="4" />
      <LineId Id="1407" Count="0" />
      <LineId Id="1786" Count="0" />
      <LineId Id="1247" Count="0" />
      <LineId Id="1514" Count="0" />
      <LineId Id="1243" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.disableExtSetPoint">
      <LineId Id="6" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.enableExtSetPoint">
      <LineId Id="6" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.FB_init">
      <LineId Id="17" Count="5" />
      <LineId Id="16" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="23" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.getDirection">
      <LineId Id="9" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.UpdateHMI">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>