<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.7">
  <POU Name="FB_WinchInterface" Id="{04fd987b-6b6d-4a7c-b1e1-6e43123e7fac}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WinchInterface
VAR_INPUT
	enable : BOOL := FALSE;
	reset : BOOL := FALSE;
	stopp : BOOL := FALSE;
	
	mode : UINT := 0;
	control : ST_ControlWinch;	
END_VAR
VAR_OUTPUT
	active : BOOL := FALSE;
	
	feedback : ST_FeedbackWinch;
	
	testL : LREAL := 0.7;
END_VAR
VAR
	// HMI feedback	
	pTxHmi : POINTER TO ST_TxHmiWinch;
	
	// MC2 Functions
	axis : AXIS_REF;
	fbPower : MC_Power;
	fbReset : MC_Reset;
	fbExtSetPointGenEnable : MC_ExtSetPointGenEnable;
	fbExtSetPointGenDisable : MC_ExtSetPointGenDisable;
	fbReadParameterSet : MC_ReadParameterSet;
	stAxisParameterSet : ST_AxisParameterSet;
	
	// Setpoint generation
	timer : TON;
	
	Ts : LREAL := 0.005;
	
	omega : LREAL := 1.0;
	beta : LREAL := 1.0;
	
	
	l : LREAL := 0.0;
	l_t : LREAL := 0.0;
	l_tt : LREAL := 0.0;
	direction : DINT := 0;
	
	// Actviity monitoring
	vel : LREAL := 0;
	velOld : LREAL := 0;
	frameLoss : UDINT := 0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Check activity
vel := axis.NcToPlc.ActVelo;
IF vel <> velOld THEN
	// Update frame old
	velOld := vel;
	
	// Reset frameLoss
	frameLoss := 0;
ELSE
	// Count frame losses
	frameLoss := frameLoss + 1;
END_IF

// Set activity status after 1 second given 5ms in ms
IF frameLoss > 200 THEN
	active := FALSE;
ELSE
	active := TRUE;
END_IF

// Update axis data
axis();


// Return feedback data
feedback.length := (7600.0 - axis.NcToPlc.ActPos + 626.0)/1000.0;
feedback.length_t := -axis.NcToPlc.ActVelo/1000.0;

// Read parameter set
fbReadParameterSet(
	Axis := axis,
	Parameter := stAxisParameterSet,
	Execute := FALSE
);
fbReadParameterSet(
	Axis := axis,
	Parameter := stAxisParameterSet,
	Execute := TRUE
);

// Check operation mode
IF fbPower.Status THEN
	CASE mode OF
	0 : 
		// Settled
		omega := 1.0;
		
		// Disable external setpoint when generator is close to standstill!
		IF ABS(l_t) < 1.0 AND ABS(l_tt) < 0.1 THEN
			DisableExtSetPoint();
		END_IF
	1 : 
		// Enagaged
		omega := 1.0;

		// Enable external setpoint
		EnableExtSetPoint();
	2 : 
		// Enagaged - Fast
		omega := 10.0;
		
		// Enable external setpoint
		EnableExtSetPoint();
	ELSE
		// Return to settled if wrong mode is set!
		mode := 0;
	END_CASE
END_IF

// Generate Trqajectory
GenerateTrajectory();

// Feed extrenal setpoints to axis interface
MC_ExtSetPointGenFeed(
	Axis := axis,
	Position := l,
	Velocity := l_t,
	Acceleration := l_tt,
	Direction := direction
);

// Set power status for winch
IF enable THEN
	// Power on the drive
	fbPower(
		Axis := axis,
		Enable := TRUE,
		Enable_Positive := TRUE,
		Enable_Negative := TRUE
	);
	// Rest disable
	reset := FALSE;
ELSE
	mode := 0;
	IF NOT fbExtSetPointGenDisable.Busy AND fbExtSetPointGenDisable.Done THEN
		// Power off the drive
		fbPower(
			Axis := axis,
			Enable := FALSE,
			Enable_Positive := FALSE,
			Enable_Negative := FALSE
		);
	END_IF
END_IF




]]></ST>
    </Implementation>
    <Method Name="DisableExtSetPoint" Id="{8625365a-3f23-4e76-ba3a-d36439744fe2}">
      <Declaration><![CDATA[METHOD PRIVATE DisableExtSetPoint : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbExtSetPointGenDisable(
	Axis := axis,
	Execute := TRUE
);
fbExtSetPointGenEnable(
	Axis := axis,
	Execute := FALSE
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableExtSetPoint" Id="{d86b78de-9d3a-4053-bd82-f21f9d22062b}">
      <Declaration><![CDATA[METHOD PRIVATE EnableExtSetPoint : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbExtSetPointGenDisable(
	Axis := axis,
	Execute := FALSE
);
fbExtSetPointGenEnable(
	Axis := axis,
	Execute := TRUE
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{4ef8ab5f-4b43-4ec7-898b-623c39afb859}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	// Init variables
	_pTxHmi : POINTER TO ST_TxHmiStewart;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Ensure Power of axis is disbaled at startup
fbPower(
	Axis := axis,
	Enable := FALSE,
	Enable_Positive := FALSE,
	Enable_Negative := FALSE
);

fbExtSetPointGenDisable(
	Axis := axis,
	Execute := FALSE
);
fbExtSetPointGenEnable(
	Axis := axis,
	Execute := FALSE
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GenerateTrajectory" Id="{a2b9dbe1-8750-44c6-b8bf-0dc16aa5e2fd}">
      <Declaration><![CDATA[METHOD PRIVATE GenerateTrajectory : BOOL
VAR_INPUT
END_VAR

VAR
	// Setpoints
	pos : LREAL;
	vel : LREAL;
	acc : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF mode = 0 THEN
	// Settle in last position
	pos := axis.NcToPlc.ActPos;
	vel := 0.0;
	acc := 0.0;
ELSE
	// Follow input trajectory
	pos := 7600.0 + 626.0 - control.length*1000.0;
	vel := -control.length_t*1000.0;
	acc := -control.length_tt*1000.0;
END_IF

// Generate trajectory using trajectory filter
l_tt := acc + 2*beta*omega*(vel - l_t) + omega*omega*(pos - l);
l_t := l_t + l_tt*Ts;
l := l + l_t*Ts;

// Apply limit to length
l := LIMIT(stAxisParameterSet.fEncSoftEndMin, l, stAxisParameterSet.fEncSoftEndMax);

// Set setpoint direction
IF l_t = 0.0 AND l_tt = 0.0 THEN
	// Standstill
	direction := 0;
ELSIF l_t >= 0.0 THEN
	// Positive motion
	direction := 1;
ELSE
	// Negative motion
	direction := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateHMI" Id="{66797478-8570-421d-ad5d-4d9d457815e9}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateHMI : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Update HMI variables]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_WinchInterface">
      <LineId Id="1335" Count="17" />
      <LineId Id="1333" Count="1" />
      <LineId Id="823" Count="0" />
      <LineId Id="825" Count="0" />
      <LineId Id="1329" Count="0" />
      <LineId Id="1177" Count="1" />
      <LineId Id="1180" Count="1" />
      <LineId Id="1054" Count="1" />
      <LineId Id="1084" Count="1" />
      <LineId Id="1088" Count="0" />
      <LineId Id="1087" Count="0" />
      <LineId Id="1083" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="1061" Count="3" />
      <LineId Id="1107" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="1032" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="1037" Count="0" />
      <LineId Id="1166" Count="0" />
      <LineId Id="1260" Count="0" />
      <LineId Id="1280" Count="0" />
      <LineId Id="1278" Count="0" />
      <LineId Id="1262" Count="0" />
      <LineId Id="1279" Count="0" />
      <LineId Id="995" Count="0" />
      <LineId Id="1029" Count="0" />
      <LineId Id="1164" Count="0" />
      <LineId Id="1039" Count="0" />
      <LineId Id="1036" Count="0" />
      <LineId Id="1028" Count="0" />
      <LineId Id="1034" Count="1" />
      <LineId Id="1165" Count="0" />
      <LineId Id="1040" Count="2" />
      <LineId Id="1266" Count="0" />
      <LineId Id="1268" Count="0" />
      <LineId Id="1267" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="897" Count="0" />
      <LineId Id="1270" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1271" Count="0" />
      <LineId Id="1247" Count="7" />
      <LineId Id="1243" Count="0" />
      <LineId Id="829" Count="0" />
      <LineId Id="795" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="742" Count="4" />
      <LineId Id="741" Count="0" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1173" Count="0" />
      <LineId Id="773" Count="0" />
      <LineId Id="1114" Count="1" />
      <LineId Id="751" Count="5" />
      <LineId Id="750" Count="0" />
      <LineId Id="1116" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="1069" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.DisableExtSetPoint">
      <LineId Id="6" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.EnableExtSetPoint">
      <LineId Id="6" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.FB_init">
      <LineId Id="17" Count="5" />
      <LineId Id="16" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="23" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.GenerateTrajectory">
      <LineId Id="22" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="39" Count="10" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_WinchInterface.UpdateHMI">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>