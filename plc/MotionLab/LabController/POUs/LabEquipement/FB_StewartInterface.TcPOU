<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.7">
  <POU Name="FB_StewartInterface" Id="{1361bc11-031f-4d48-8e10-a5face54a5bf}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_StewartInterface
VAR_INPUT
	// Stewart mode input
	mode : E_StewartMode;
	cmnd : DINT;
	
	// Control inputs
	u : ARRAY [0..5] OF LREAL := [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
	u_sim AT %I* : ARRAY [0..5] OF LREAL := [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
	
	// Max/min settings
	u_max : ARRAY [0..5] OF LREAL := [0.2, 0.2, 0.4, 10.0/180.0*pi, 10.0/180.0*pi, 5.0/180.0*pi];
	u_min : ARRAY [0..5] OF LREAL := [-0.2, -0.2, -0.4, -10.0/180.0*pi, -10.0/180.0*pi, -5.0/180.0*pi];
	
END_VAR
VAR_OUTPUT
	// Feedback data
	eta : ARRAY [0..5] OF LREAL;
	eta_t : ARRAY [0..5] OF LREAL;
	eta_tt : ARRAY [0..5] OF LREAL;
	L : ARRAY [0..5] OF LREAL;
END_VAR
VAR	
	// Udp related
	{attribute 'tc_no_symbol'}
	udpClient : FB_UdpClient(0, 0, 0, 0, 0, 0, 0);	// Dummy constructor
	{attribute 'tc_no_symbol'}
	rxUdp : ST_RxStewart;
	{attribute 'tc_no_symbol'}
	txUdp : ST_TxStewart;
	{attribute 'tc_no_symbol'}
	
	// Udp output
	{attribute 'tc_no_symbol'}
	modeOld : E_StewartMode;
	
	// Stewart home position
	u_home : ARRAY [0..5] OF LREAL := [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
	
	// Hmi related
	pTxHmi : PVOID;
	txHmi : ST_TxHmiStewart;
	
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// State machine case
mode := eSIMULATION;



CASE mode OF 
eIDLE:
	//
	u := u_home;

eRESET:
	//
	
	
eSIMULATION:
	// Ship simulation mode
	u := u_sim;
	txUdp.CMND := cmnd;
	
eXBOX:
	//

eERROR:
	//

ELSE
	//	

END_CASE


// Update UDP data
UpdateUDP();

// Update HMI data
UpdateHMI();



]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{8ba73825-ee69-4ede-8932-47c54b7f6de6}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{06b517cb-e9ba-491f-b4c0-60d83ffac9ef}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	// Init variables
	_remoteIpAddr : UDINT;
	_remotePort : UINT;
	_localPort : UINT;
	_pTxHmi : PVOID;
END_VAR
VAR

	
    ipSrv : ITComObjectServer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
pTxHmi := _pTxHmi;

// Initilize udpClient
udpClient.FB_init(
	bInitRetains,
	bInCopyCode,
	_remoteIpAddr,
	_remotePort,
	_localPort,
	SIZEOF(rxUdp),
	ADR(rxUdp),
	SIZEOF(txUdp),
	ADR(txUdp)
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{4b663cd2-46c9-45ec-89d5-bc5feb2a54a3}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateHMI" Id="{c5bef0f6-f462-472c-ac4f-635250a1dacd}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateHMI
VAR_INPUT
END_VAR
	
VAR
	dof : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
txHmi.status := -1;

FOR dof := 0 TO 5 DO
	// Control
	txHmi.u[dof] := LREAL_TO_REAL(u[dof]);
	txHmi.u_sim[dof] := LREAL_TO_REAL(u_sim[dof]);
	
	// Feedback
	txHmi.eta[dof] := LREAL_TO_REAL(eta[dof]);
	txHmi.L[dof] := LREAL_TO_REAL(L[dof]);
END_FOR

// Copy to HMI pointer
MEMCPY(pTxHmi, ADR(txHmi), SIZEOF(txHmi));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateUDP" Id="{fa7be61e-1c66-4719-a523-22b569833bd3}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateUDP
VAR_INPUT
END_VAR
VAR
	dof : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Go to neutral if mode is changed online
IF mode <> modeOld THEN
	txUdp.CMND := 3;
END_IF

// Increment counter to keep Stewart alive
txUdp.COUNT := txUdp.COUNT + 1;

// Limit output to min/max values
FOR dof := 0 TO 5 DO
	u[dof] := LIMIT(u_min[dof], u[dof], u_max[dof]);
END_FOR


// Control data with absolute limits applied
txUdp.X_EXTRA := LREAL_TO_REAL(u[0]);
txUdp.Y_EXTRA := LREAL_TO_REAL(u[1]);
txUdp.Z_EXTRA := LREAL_TO_REAL(u[2]);
txUdp.PHI_EXTRA := LREAL_TO_REAL(u[3]);
txUdp.THETA_EXTRA := LREAL_TO_REAL(u[4]);
txUdp.PSI_EXTRA := LREAL_TO_REAL(u[5]);

// Update udpClient
udpClient();

// Feedback data
eta[0] := REAL_TO_LREAL(rxUdp.Actual_platform_position_surge);
eta[1] := REAL_TO_LREAL(rxUdp.Actual_platform_position_sway);
eta[2] := REAL_TO_LREAL(rxUdp.Actual_platform_position_heave);
eta[3] := REAL_TO_LREAL(rxUdp.Actual_platform_position_roll);
eta[4] := REAL_TO_LREAL(rxUdp.Actual_platform_position_pitch);
eta[5] := REAL_TO_LREAL(rxUdp.Actual_platform_position_yaw);

eta_t[0] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_surge);
eta_t[1] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_sway);
eta_t[2] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_heave);
eta_t[3] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_roll);
eta_t[4] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_pitch);
eta_t[5] := REAL_TO_LREAL(rxUdp.Actual_platform_velocity_yaw);

eta_tt[0] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_surge);
eta_tt[1] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_sway);
eta_tt[2] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_heave);
eta_tt[3] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_roll);
eta_tt[4] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_pitch);
eta_tt[5] := REAL_TO_LREAL(rxUdp.Actual_platform_acceleration_yaw);

L[0] := REAL_TO_LREAL(rxUdp.Actual_position_actuator_1);
L[1] := REAL_TO_LREAL(rxUdp.Actual_position_actuator_2);
L[2] := REAL_TO_LREAL(rxUdp.Actual_position_actuator_3);
L[3] := REAL_TO_LREAL(rxUdp.Actual_position_actuator_4);
L[4] := REAL_TO_LREAL(rxUdp.Actual_position_actuator_5);
L[5] := REAL_TO_LREAL(rxUdp.Actual_position_actuator_6);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_StewartInterface">
      <LineId Id="46" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="239" Count="1" />
      <LineId Id="67" Count="1" />
      <LineId Id="194" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="210" Count="4" />
      <LineId Id="209" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="92" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.FB_exit">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.FB_init">
      <LineId Id="71" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="44" Count="4" />
      <LineId Id="51" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.FB_reinit">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.UpdateHMI">
      <LineId Id="26" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_StewartInterface.UpdateUDP">
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="4" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="4" />
      <LineId Id="15" Count="5" />
      <LineId Id="14" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="29" Count="11" />
      <LineId Id="28" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>