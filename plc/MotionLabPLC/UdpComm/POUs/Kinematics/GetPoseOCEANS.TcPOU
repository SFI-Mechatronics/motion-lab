<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="GetPoseOCEANS" Id="{acda146c-13c8-4073-b4f5-653283a08667}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GetPoseOCEANS
VAR_INPUT
    x_u: LREAL;
    y_u: LREAL;
    z_u: LREAL;
    x_L: LREAL;
    y_L: LREAL;
    z_L: LREAL;
    q0: LREAL;
    q1: LREAL;
    q2: LREAL;
    q3: LREAL;
END_VAR
VAR_OUTPUT
    x: LREAL;
    y: LREAL;
    z: LREAL;
END_VAR
VAR
    b_f: ARRAY [0..3] OF SINT := [1,0,0,0];
    c: ARRAY [0..3] OF SINT := [0,1,0,0];
    b_d: ARRAY [0..3] OF SINT := [0,0,1,0];
    e: ARRAY [0..3] OF SINT := [0,0,0,1];
    a: ARRAY [0..15] OF LREAL := [-0.85564166442274014,-0.51752775210038238,-0.0065090636659879087,0.0,
        0.51750879245705517,-0.85566630860111492,0.00445174736286552,0.0,-0.0078734892851473719,
        0.00044060284534147131,0.9999689065344034,0.0,-0.35942187254039148,-0.842988759129317,0.33048843103591974,
        1.0];
    b: ARRAY [0..15] OF LREAL := [-0.51161210936156265,-0.44213085981369538,0.73673153343332243,0.0,
        -0.85913974942097615,0.25177612175439157,-0.44551955678643329,0.0,0.011486536443794548,-0.8608885452337719,
        -0.50866390884925683,0.0,-0.78024460486487723,-0.37242106996588831,-0.0515272540247409,1.0];
END_VAR
VAR_TEMP
    Hbt: ARRAY [0..15] OF LREAL;
    b_R: ARRAY [0..15] OF LREAL;
    tmp: ARRAY [0..15] OF LREAL;
    f: ARRAY [0..15] OF LREAL;
    tmp_0: ARRAY [0..15] OF LREAL;
    f_0: ARRAY [0..15] OF LREAL;
    i: DINT;
    i_0: DINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* MATLAB Function: '<Root>/MATLAB Function' incorporates:
 *  Inport: '<Root>/q0'
 *  Inport: '<Root>/q1'
 *  Inport: '<Root>/q2'
 *  Inport: '<Root>/q3'
 *  Inport: '<Root>/x_L'
 *  Inport: '<Root>/x_u'
 *  Inport: '<Root>/y_L'
 *  Inport: '<Root>/y_u'
 *  Inport: '<Root>/z_L'
 *  Inport: '<Root>/z_u' *)
(* MATLAB Function 'MATLAB Function': '<S1>:1' *)
(* '<S1>:1:5' calib = coder.load('leicaCalibMatrices.mat'); *)
(* '<S1>:1:6' calib2 = coder.load('calibMatrices.mat'); *)
(* '<S1>:1:8' H1L = calib.H1L; *)
(* '<S1>:1:9' HP2 = calib.HP2; *)
(* '<S1>:1:10' H1b = calib2.T1R; *)
(* User loaction *)
(* '<S1>:1:13' H2t = Tx(x_u)*Ty(y_u)*Tz(z_u); *)
(* 'Tx:3' T = [1, 0, 0, x; *)
(* 'Tx:4'      0, 1, 0, 0; *)
(* 'Tx:5'      0, 0, 1, 0; *)
(* 'Tx:6'      0, 0, 0, 1]; *)
(* 'Ty:3' T = [1, 0, 0, 0; *)
(* 'Ty:4'      0, 1, 0, y; *)
(* 'Ty:5'      0, 0, 1, 0; *)
(* 'Ty:6'      0, 0, 0, 1]; *)
(* 'Tz:3' T = [1, 0, 0, 0; *)
(* 'Tz:4'      0, 1, 0, 0; *)
(* 'Tz:5'      0, 0, 1, z; *)
(* 'Tz:6'      0, 0, 0, 1]; *)
(* Leica measure as H matrix *)
(* '<S1>:1:16' q = [q0,q1,q2,q3]; *)
(* '<S1>:1:17' HLP = Tx(x_L)*Ty(y_L)*Tz(z_L)*Rq(q); *)
(* 'Tx:3' T = [1, 0, 0, x; *)
(* 'Tx:4'      0, 1, 0, 0; *)
(* 'Tx:5'      0, 0, 1, 0; *)
(* 'Tx:6'      0, 0, 0, 1]; *)
(* 'Ty:3' T = [1, 0, 0, 0; *)
(* 'Ty:4'      0, 1, 0, y; *)
(* 'Ty:5'      0, 0, 1, 0; *)
(* 'Ty:6'      0, 0, 0, 1]; *)
(* 'Tz:3' T = [1, 0, 0, 0; *)
(* 'Tz:4'      0, 1, 0, 0; *)
(* 'Tz:5'      0, 0, 1, z; *)
(* 'Tz:6'      0, 0, 0, 1]; *)
(* https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation *)
(* 'Rq:6' q0 = q(1,1); *)
(* 'Rq:7' qX = q(1,2); *)
(* 'Rq:8' qY= q(1,3); *)
(* 'Rq:9' qZ = q(1,4); *)
(* 'Rq:11' R = eye(4,4); *)
(* 'Rq:13' R(1,1) = 1 - 2*qY^2 - 2*qZ^2; *)
b_R[0] := (1.0 - ((q2 * q2) * 2.0)) - ((q3 * q3) * 2.0);
(* 'Rq:14' R(2,1) = 2*(qX*qY  + qZ*q0); *)
b_R[1] := ((q1 * q2) + (q3 * q0)) * 2.0;
(* 'Rq:15' R(3,1) = 2*(qX*qZ - qY*q0); *)
b_R[2] := ((q1 * q3) - (q2 * q0)) * 2.0;
(* 'Rq:17' R(1,2) = 2*(qX*qY - qZ*q0); *)
b_R[4] := ((q1 * q2) - (q3 * q0)) * 2.0;
(* 'Rq:18' R(2,2) = 1 - 2*qX^2 - 2*qZ^2; *)
b_R[5] := (1.0 - ((q1 * q1) * 2.0)) - ((q3 * q3) * 2.0);
(* 'Rq:19' R(3,2) = 2*(qY*qZ + qX*q0); *)
b_R[6] := ((q2 * q3) + (q1 * q0)) * 2.0;
(* 'Rq:21' R(1,3) = 2*(qX*qZ + qY*q0); *)
b_R[8] := ((q1 * q3) + (q2 * q0)) * 2.0;
(* 'Rq:22' R(2,3) = 2*(qY*qZ - qX*q0); *)
b_R[9] := ((q2 * q3) - (q1 * q0)) * 2.0;
(* 'Rq:23' R(3,3) = 1 - 2*qX^2 - 2*qY^2; *)
b_R[10] := (1.0 - ((q1 * q1) * 2.0)) - ((q2 * q2) * 2.0);
(* R(1,1) = 2 * q0 ^ 2 + 2 * qX ^ 2 - 1; *)
(* R(2,2) = 2 * q0 ^ 2 + 2 * qY ^ 2 - 1; *)
(* R(3,3) = 2 * q0 ^ 2 + 2 * qZ ^ 2 - 1; *)
(* R(1,2) = 2 * qX * qY - 2 * q0 * qZ; *)
(* R(2,1) = 2 * qX * qY + 2 * q0 * qZ; *)
(* R(2,3) = -2 * q0 * qX + 2 * qY * qZ; *)
(* R(3,2) = 2 * q0 * qX + 2 * qY * qZ; *)
(* R(3,1) = -2 * q0 * qY + 2 * qX * qZ; *)
(* R(1,3) = 2 * q0 * qY + 2 * qX * qZ; *)
(* 'Rq:36' R(1,4) = 0; *)
b_R[12] := 0.0;
(* 'Rq:37' R(2,4) = 0; *)
b_R[13] := 0.0;
(* 'Rq:38' R(3,4) = 0; *)
b_R[14] := 0.0;
(* 'Rq:40' R(4,1) = 0; *)
b_R[3] := 0.0;
(* 'Rq:41' R(4,2) = 0; *)
b_R[7] := 0.0;
(* 'Rq:42' R(4,3) = 0; *)
b_R[11] := 0.0;
(* 'Rq:43' R(4,4) = 1; *)
b_R[15] := 1.0;
(* Required robot pose *)
(* '<S1>:1:20' Hbt = InvH(H1b)*H1L*HLP*HP2*H2t; *)
tmp[0] := 1.0;
tmp[4] := 0.0;
tmp[8] := 0.0;
tmp[12] := x_L;
tmp[1] := 0.0;
tmp[2] := 0.0;
tmp[3] := 0.0;
f[0] := 1.0;
tmp[5] := 1.0;
tmp[6] := 0.0;
tmp[7] := 0.0;
f[4] := 0.0;
tmp[9] := 0.0;
tmp[10] := 1.0;
tmp[11] := 0.0;
f[8] := 0.0;
tmp[13] := 0.0;
tmp[14] := 0.0;
tmp[15] := 1.0;
f[12] := 0.0;
f[1] := 0.0;
f[5] := 1.0;
f[9] := 0.0;
f[13] := y_L;
f[2] := 0.0;
f[3] := 0.0;
f[6] := 0.0;
f[7] := 0.0;
f[10] := 1.0;
f[11] := 0.0;
f[14] := 0.0;
f[15] := 1.0;
FOR i := 0 TO 3 DO 
    FOR i_0 := 0 TO 3 DO 
        tmp_0[i + (i_0 * 4)] := 0.0;
        tmp_0[i + (i_0 * 4)] := tmp_0[(i_0 * 4) + i] + (f[i_0 * 4] * tmp[i]);
        tmp_0[i + (i_0 * 4)] := (f[(i_0 * 4) + 1] * tmp[i + 4]) + tmp_0[(i_0 * 4) + i];
        tmp_0[i + (i_0 * 4)] := (f[(i_0 * 4) + 2] * tmp[i + 8]) + tmp_0[(i_0 * 4) + i];
        tmp_0[i + (i_0 * 4)] := (f[(i_0 * 4) + 3] * tmp[i + 12]) + tmp_0[(i_0 * 4) + i];
    END_FOR;
    f_0[i * 4] := SINT_TO_LREAL(b_f[i]);
    f_0[1 + (i * 4)] := SINT_TO_LREAL(c[i]);
END_FOR;
f_0[2] := 0.0;
f_0[6] := 0.0;
f_0[10] := 1.0;
f_0[14] := z_L;
f_0[3] := 0.0;
f_0[7] := 0.0;
f_0[11] := 0.0;
f_0[15] := 1.0;
FOR i := 0 TO 3 DO 
    FOR i_0 := 0 TO 3 DO 
        tmp[i + (i_0 * 4)] := 0.0;
        tmp[i + (i_0 * 4)] := tmp[(i_0 * 4) + i] + (f_0[i_0 * 4] * tmp_0[i]);
        tmp[i + (i_0 * 4)] := (f_0[(i_0 * 4) + 1] * tmp_0[i + 4]) + tmp[(i_0 * 4) + i];
        tmp[i + (i_0 * 4)] := (f_0[(i_0 * 4) + 2] * tmp_0[i + 8]) + tmp[(i_0 * 4) + i];
        tmp[i + (i_0 * 4)] := (f_0[(i_0 * 4) + 3] * tmp_0[i + 12]) + tmp[(i_0 * 4) + i];
    END_FOR;
END_FOR;
FOR i := 0 TO 3 DO 
    FOR i_0 := 0 TO 3 DO 
        tmp_0[i + (i_0 * 4)] := 0.0;
        tmp_0[i + (i_0 * 4)] := tmp_0[(i_0 * 4) + i] + (b_R[i_0 * 4] * tmp[i]);
        tmp_0[i + (i_0 * 4)] := (b_R[(i_0 * 4) + 1] * tmp[i + 4]) + tmp_0[(i_0 * 4) + i];
        tmp_0[i + (i_0 * 4)] := (b_R[(i_0 * 4) + 2] * tmp[i + 8]) + tmp_0[(i_0 * 4) + i];
        tmp_0[i + (i_0 * 4)] := (b_R[(i_0 * 4) + 3] * tmp[i + 12]) + tmp_0[(i_0 * 4) + i];
    END_FOR;
END_FOR;
tmp[0] := 1.0;
tmp[4] := 0.0;
tmp[8] := 0.0;
tmp[12] := x_u;
FOR i := 0 TO 3 DO 
    FOR i_0 := 0 TO 3 DO 
        b_R[i + (i_0 * 4)] := 0.0;
        b_R[i + (i_0 * 4)] := b_R[(i_0 * 4) + i] + (tmp_0[i_0 * 4] * a[i]);
        b_R[i + (i_0 * 4)] := (tmp_0[(i_0 * 4) + 1] * a[i + 4]) + b_R[(i_0 * 4) + i];
        b_R[i + (i_0 * 4)] := (tmp_0[(i_0 * 4) + 2] * a[i + 8]) + b_R[(i_0 * 4) + i];
        b_R[i + (i_0 * 4)] := (tmp_0[(i_0 * 4) + 3] * a[i + 12]) + b_R[(i_0 * 4) + i];
    END_FOR;
    tmp[1 + (i * 4)] := SINT_TO_LREAL(c[i]);
    tmp[2 + (i * 4)] := SINT_TO_LREAL(b_d[i]);
    tmp[3 + (i * 4)] := SINT_TO_LREAL(e[i]);
    f[i * 4] := SINT_TO_LREAL(b_f[i]);
END_FOR;
f[1] := 0.0;
f[5] := 1.0;
f[9] := 0.0;
f[13] := y_u;
f[2] := 0.0;
f[3] := 0.0;
f[6] := 0.0;
f[7] := 0.0;
f[10] := 1.0;
f[11] := 0.0;
f[14] := 0.0;
f[15] := 1.0;
FOR i := 0 TO 3 DO 
    FOR i_0 := 0 TO 3 DO 
        tmp_0[i + (i_0 * 4)] := 0.0;
        tmp_0[i + (i_0 * 4)] := tmp_0[(i_0 * 4) + i] + (f[i_0 * 4] * tmp[i]);
        tmp_0[i + (i_0 * 4)] := (f[(i_0 * 4) + 1] * tmp[i + 4]) + tmp_0[(i_0 * 4) + i];
        tmp_0[i + (i_0 * 4)] := (f[(i_0 * 4) + 2] * tmp[i + 8]) + tmp_0[(i_0 * 4) + i];
        tmp_0[i + (i_0 * 4)] := (f[(i_0 * 4) + 3] * tmp[i + 12]) + tmp_0[(i_0 * 4) + i];
    END_FOR;
    f_0[i * 4] := SINT_TO_LREAL(b_f[i]);
    f_0[1 + (i * 4)] := SINT_TO_LREAL(c[i]);
END_FOR;
f_0[2] := 0.0;
f_0[6] := 0.0;
f_0[10] := 1.0;
f_0[14] := z_u;
FOR i := 0 TO 3 DO 
    f_0[3 + (i * 4)] := SINT_TO_LREAL(e[i]);
    FOR i_0 := 0 TO 3 DO 
        f[i + (i_0 * 4)] := 0.0;
        f[i + (i_0 * 4)] := f[(i_0 * 4) + i] + (b[i_0 * 4] * b_R[i]);
        f[i + (i_0 * 4)] := (b[(i_0 * 4) + 1] * b_R[i + 4]) + f[(i_0 * 4) + i];
        f[i + (i_0 * 4)] := (b[(i_0 * 4) + 2] * b_R[i + 8]) + f[(i_0 * 4) + i];
        f[i + (i_0 * 4)] := (b[(i_0 * 4) + 3] * b_R[i + 12]) + f[(i_0 * 4) + i];
    END_FOR;
END_FOR;
FOR i := 0 TO 3 DO 
    FOR i_0 := 0 TO 3 DO 
        tmp[i + (i_0 * 4)] := 0.0;
        tmp[i + (i_0 * 4)] := tmp[(i_0 * 4) + i] + (f_0[i_0 * 4] * tmp_0[i]);
        tmp[i + (i_0 * 4)] := (f_0[(i_0 * 4) + 1] * tmp_0[i + 4]) + tmp[(i_0 * 4) + i];
        tmp[i + (i_0 * 4)] := (f_0[(i_0 * 4) + 2] * tmp_0[i + 8]) + tmp[(i_0 * 4) + i];
        tmp[i + (i_0 * 4)] := (f_0[(i_0 * 4) + 3] * tmp_0[i + 12]) + tmp[(i_0 * 4) + i];
    END_FOR;
END_FOR;
FOR i := 0 TO 3 DO 
    FOR i_0 := 0 TO 3 DO 
        Hbt[i + (i_0 * 4)] := 0.0;
        Hbt[i + (i_0 * 4)] := Hbt[(i_0 * 4) + i] + (tmp[i_0 * 4] * f[i]);
        Hbt[i + (i_0 * 4)] := (tmp[(i_0 * 4) + 1] * f[i + 4]) + Hbt[(i_0 * 4) + i];
        Hbt[i + (i_0 * 4)] := (tmp[(i_0 * 4) + 2] * f[i + 8]) + Hbt[(i_0 * 4) + i];
        Hbt[i + (i_0 * 4)] := (tmp[(i_0 * 4) + 3] * f[i + 12]) + Hbt[(i_0 * 4) + i];
    END_FOR;
END_FOR;
(* '<S1>:1:24' x = Hbt(1,4); *)
(* '<S1>:1:25' y = Hbt(2,4); *)
(* '<S1>:1:26' z = Hbt(3,4); *)
(* Outport: '<Root>/x' incorporates:
 *  MATLAB Function: '<Root>/MATLAB Function' *)
x := Hbt[12];
(* Outport: '<Root>/y' incorporates:
 *  MATLAB Function: '<Root>/MATLAB Function' *)
y := Hbt[13];
(* Outport: '<Root>/z' incorporates:
 *  MATLAB Function: '<Root>/MATLAB Function' *)
z := Hbt[14];]]></ST>
    </Implementation>
    <LineIds Name="GetPoseOCEANS">
      <LineId Id="969" Count="246" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>