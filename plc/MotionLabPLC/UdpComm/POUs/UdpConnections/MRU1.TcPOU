<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="MRU1" Id="{bc58be35-4d76-4ddf-bb8d-a3823b2a964f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MRU1
VAR
	buffer			: ARRAY [1..1024] OF BYTE;
	
	_feedback		: MruFeedback;
	NULL			: PVOID;
	UdpIO			: UdpServer(7551, 0, NULL, SIZEOF(_feedback), ADR(buffer));
		
	temp			: ARRAY [0..3] OF BYTE;
	N				: DINT;	
END_VAR

VAR_OUTPUT
	feedback		: RemoteFeedbackMru;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
UdpIO();

_feedback.mruOK := buffer[1];
_feedback.dataLength := buffer[2];
_feedback.token := buffer[3];

// Big to little endian conversions
N := 1;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3]; 
MEMCPY(ADR(_feedback.Temperature), ADR(temp), 4);

N := 2;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3]; 
MEMCPY(ADR(_feedback.PosMru_D), ADR(temp), 4);

N := 3;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.VelMru_D), ADR(temp), 4);

N := 4;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AccMru_D), ADR(temp), 4);

N := 5;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AngRate_D), ADR(temp), 4);

N := 6;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.Roll), ADR(temp), 4);

N := 7;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.Pitch), ADR(temp), 4);

N := 8;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.Yaw), ADR(temp), 4);

N := 9;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AngRate_R), ADR(temp), 4);

N := 10;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AngRate_P), ADR(temp), 4);

N := 11;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AngRate_Y), ADR(temp), 4);

N := 12;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AngAcc_R), ADR(temp), 4);

N := 13;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AngAcc_P), ADR(temp), 4);

N := 14;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AngAcc_Y), ADR(temp), 4);

N := 15;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.VelMru_R), ADR(temp), 4);

N := 16;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.VelMru_P), ADR(temp), 4);

N := 17;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.VelMru_Y), ADR(temp), 4);

N := 18;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AccMru_R), ADR(temp), 4);

N := 19;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AccMru_P), ADR(temp), 4);

N := 20;
temp[3] := buffer[N*4];
temp[2] := buffer[N*4 + 1];
temp[1] := buffer[N*4 + 2];
temp[0] := buffer[N*4 + 3];
MEMCPY(ADR(_feedback.AccMru_Y), ADR(temp), 4);

// Convert data to remote feedback
feedback.heave := _feedback.PosMru_D;
feedback.heave_t := _feedback.VelMru_D;
feedback.heave_tt := _feedback.AccMru_D;
feedback.turn_rate := _feedback.AngRate_D;
feedback.roll := _feedback.Roll;
feedback.pitch := _feedback.Pitch;
feedback.yaw := _feedback.Yaw;
feedback.wx := _feedback.AngRate_R;
feedback.wy := _feedback.AngRate_P;
feedback.wz := _feedback.AngRate_Y;
feedback.wx_t := _feedback.AngAcc_R;
feedback.wy_t := _feedback.AngAcc_P;
feedback.wz_t := _feedback.AngAcc_Y;
feedback.x_t := _feedback.VelMru_R;
feedback.y_t := _feedback.VelMru_P;
feedback.z_t := _feedback.VelMru_Y;
feedback.x_tt := _feedback.AccMru_R;
feedback.y_tt := _feedback.AccMru_P;
feedback.z_tt := _feedback.AccMru_Y;
]]></ST>
    </Implementation>
    <LineIds Name="MRU1">
      <LineId Id="46" Count="5" />
      <LineId Id="54" Count="141" />
      <LineId Id="214" Count="18" />
      <LineId Id="196" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>