<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="ComauInterface" Id="{d2f3bbdf-53d6-48ce-8687-0c01a6900a56}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK ComauInterface IMPLEMENTS ITcIoUdpProtocolRecv
VAR_INPUT
	cmnd				: DINT;
	control				: ControlComau;
END_VAR
VAR_OUTPUT
	feedback			: FeedbackComau;
END_VAR
VAR
	// UDP connection
	{attribute 'TcInitSymbol'}
	oid					: OTCID;
	ipUdp 				: ITcIoUdpProtocol;
	recvCounter			: UDINT := 0;
	sendCounter			: UDINT := 0;
	remoteUdpPort		: UINT;
	remoteIpAddr		: UDINT;	
	localUdpPort		: UINT;
	
	// UDP raw data structures
	rxUdpData			: RxComau;
	txUdpData			: TxComau;
	
	// HMI data
	pTxHmiData			: PVOID;
	txHmiData			: TxHmiComau;
	
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Update IO data
UpdateIO();

// Update UDP data
UpdateUDP();

// Update HMI data
UpdateHMI();



]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{fb84454a-9911-40a0-8d68-d9aea36e076c}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT bInCopyCode AND ipUdp <> 0) THEN //Shutdown
	ipUdp.UnregisterReceiver(localUdpPort);
	FW_SafeRelease(ADR(ipUdp));
	FB_exit := TRUE;
ELSE
	FB_exit := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{e628e4d7-1328-4556-8ad8-21329793d760}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains		: BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode			: BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	// Contructor arguments
	_remoteIpAddr		: UDINT;
	_remoteUdpPort 		: UINT;
	_localUdpPort	 	: UINT;
	_pTxHmiData			: PVOID;
END_VAR

VAR
	ipSrv				: ITComObjectServer;
	hr 					: HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initilize parameters
remoteIpAddr := _remoteIpAddr;
remoteUdpPort := _remoteUdpPort;
localUdpPort := _localUdpPort;
pTxHmiData := _pTxHmiData;

IF NOT bInCopyCode THEN // no online change
	IF ipUdp = 0 THEN
	    hr := FW_ObjMgr_GetObjectInstance(oid:=oid, iid:=TC_GLOBAL_IID_LIST.IID_ITcIoUdpProtocol, pipUnk:=ADR(ipUdp) );
		
		IF ( SUCCEEDED(hr) AND ipUdp.RegisterReceiver(localUdpPort, THIS^) = 0 ) THEN //open port
			FB_init := TRUE;
		ELSE
			FB_init := FALSE;			
			FW_SafeRelease(ADR(ipUdp));
		END_IF				
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{2822b5aa-cb03-4f41-8b88-4ceb218050ec}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ipUdp <> 0) THEN 
  ipUdp.RegisterReceiver(localUdpPort, THIS^);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveData" Id="{b6e4a0f6-09af-4ddc-aa8b-5c86592bd423}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}

METHOD ReceiveData : HRESULT
VAR_INPUT
	ipAddr	: UDINT;
	udpDestPort	: UINT;
	udpSrcPort	: UINT;
	nData	: UDINT;
	pData	: PVOID;
	pVlan	: POINTER TO ETYPE_VLAN_HEADER := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nData = SIZEOF(rxUdpData)) THEN
	// Copy recieved pData to rxUdpData
	MEMCPY(ADR(rxUdpData), pData, nData);
	
	// Count number of recieved UDP packets
	recvCounter := recvCounter + 1;
END_IF;	]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcAddRef" Id="{894cd250-b57b-462a-80b5-d70c86feddf6}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}

METHOD TcAddRef : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{bb1f9ffc-d95d-4592-8a94-8c1e53515079}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}

METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcRelease" Id="{00f45eb8-fefc-4c9f-b032-37f2dbf44d70}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}

METHOD TcRelease : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateHMI" Id="{c4ae0a9e-0946-4bdd-9438-5bff244fc605}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateHMI : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[txHmiData.status := -1;

txHmiData.q1 := rxUdpData.q1;
txHmiData.q2 := rxUdpData.q2;
txHmiData.q3 := rxUdpData.q3;
txHmiData.q4 := rxUdpData.q4;
txHmiData.q5 := rxUdpData.q5;
txHmiData.q6 := rxUdpData.q6;

// Update global HMI data
MEMCPY(pTxHmiData, ADR(txHmiData), SIZEOF(txHmiData));]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateIO" Id="{aec84c85-4c05-42bf-a9d5-2e4391cb85b4}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateIO : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Settings
txUdpData.udp_key := 32;
txUdpData.cmnd := cmnd;
txUdpData.beta := 1.0;
txUdpData.omega := 1.0;

// Control data
txUdpData.q1 := control.q1;
txUdpData.q2 := control.q2;
txUdpData.q3 := control.q3;
txUdpData.q4 := control.q4;
txUdpData.q5 := control.q5;
txUdpData.q6 := control.q6;
txUdpData.q1_t := control.q1_t;
txUdpData.q2_t := control.q2_t;
txUdpData.q3_t := control.q3_t;
txUdpData.q4_t := control.q4_t;
txUdpData.q5_t := control.q5_t;
txUdpData.q6_t := control.q6_t;
txUdpData.q1_tt := control.q1_tt;
txUdpData.q2_tt := control.q2_tt;
txUdpData.q3_tt := control.q3_tt;
txUdpData.q4_tt := control.q4_tt;
txUdpData.q5_tt := control.q5_tt;
txUdpData.q6_tt := control.q6_tt;

// Feedback data
feedback.q1 := rxUdpData.q1;
feedback.q2 := rxUdpData.q2;
feedback.q3 := rxUdpData.q3;
feedback.q4 := rxUdpData.q4;
feedback.q5 := rxUdpData.q5;
feedback.q6 := rxUdpData.q6;
feedback.q1_t := rxUdpData.q1_t;
feedback.q2_t := rxUdpData.q2_t;
feedback.q3_t := rxUdpData.q3_t;
feedback.q4_t := rxUdpData.q4_t;
feedback.q5_t := rxUdpData.q5_t;
feedback.q6_t := rxUdpData.q6_t;
feedback.q1_tt := rxUdpData.q1_tt;
feedback.q2_tt := rxUdpData.q2_tt;
feedback.q3_tt := rxUdpData.q3_tt;
feedback.q4_tt := rxUdpData.q4_tt;
feedback.q5_tt := rxUdpData.q5_tt;
feedback.q6_tt := rxUdpData.q6_tt;]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateUDP" Id="{3c50b8b3-c1da-4429-ac56-06dbd4b5481b}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateUDP : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Send data to remote UDP server
IF ipUdp <> 0 THEN
	// Send data to remote UDP server
	ipUdp.SendData(remoteIpAddr, remoteUdpPort, localUdpPort, SIZEOF(txUdpData), ADR(txUdpData), TRUE, 0);
	sendCounter := sendCounter + 1;
	
	// Check for recieved data
	ipUdp.CheckReceived();
END_IF

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ComauInterface">
      <LineId Id="210" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="87" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.FB_exit">
      <LineId Id="7" Count="5" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.FB_init">
      <LineId Id="27" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="42" Count="12" />
      <LineId Id="23" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.FB_reinit">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.ReceiveData">
      <LineId Id="19" Count="5" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.TcAddRef">
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.TcQueryInterface">
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.TcRelease">
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.UpdateHMI">
      <LineId Id="9" Count="6" />
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.UpdateIO">
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="6" Count="18" />
      <LineId Id="43" Count="0" />
      <LineId Id="25" Count="17" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ComauInterface.UpdateUDP">
      <LineId Id="6" Count="9" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>